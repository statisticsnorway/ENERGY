{Application 'MENU' logic file generated by CSPro}
PROC GLOBAL
    // Country dependent parameters.
	String syncUrl;
    String theCountry;
	
	numeric TemporaryHackFixThis;


	String loggedIn;				//To keep track of logged in as supervisor ("S"), interwiever ("I") or not at all ("N")
	numeric vsetMax = 100;		//Maximum number of items in dropdown lists
	string newEA = "2";			//To keep track if we moved to a new EA. 2 = No
	array string tabletCount(4,2); //To keep track of number of households assigned to each interviewer/tablet
									// first dimension: Id of tablet, second: number of HH assigned to tablet
	numeric serialStart = 0;			//Sets the start value of the serial number used for households (to be found in the users.csdb
									
	map HHmap;		//for showing the HHs on a map
	
	
	

	//function to strip leading spaces (the original strip function only strips trailing spaces)
	function string lstrip(string theString)
		numeric aPos = pos(" ", theString);
		while aPos = 1 do
			//leading space
			theString = theString[2];
			aPos = pos(" ", theString);
		enddo;
		lstrip = theString;
	end;
	
	
	//Function that strips both leading and trailing spaces
	function string tstrip(string theString)
		tstrip = strip(lstrip(theString));
	end;

	
	
	//Function to verify setting variables
	function string verifyVariables()
		//First need to look up names of geography variables
		REGION_CODE = visualValue(M_REGION);
		DISTRICT_CODE = visualValue(M_DISTRICT);
		SUBDISTRICT_CODE = visualValue(M_SUBDISTRICT);
		LOCALITY_CODE = visualValue(M_LOCALITY);
		VILLAGE_CODE = visualValue(M_VILLAGE);
		EA_CODE = visualValue(M_EA);
		numeric ok = loadCase(REGIONS_DICT, REGION_CODE, DISTRICT_CODE, SUBDISTRICT_CODE,
					LOCALITY_CODE, VILLAGE_CODE, EA_CODE);
		string verifyString = concat(tr(57), "\n",
									tr(50), ": ", login, "\n",
									tr(51), ": ", REGION_NAME, "\n",
									tr(52), ": ", DISTRICT_NAME, "\n",
									tr(53), ": ", SUBDISTRICT_NAME, "\n",
									tr(54), ": ", LOCALITY_NAME, "\n",
									tr(55), ": ", VILLAGE_NAME, "\n",
									tr(56), ": ", EA_NAME, "\n\n",
									"(1 = ", tr(21), " 2 = ", tr(58), ")");
		String i  = prompt(verifyString,numeric);
		verifyVariables = i;
		
	end;
								

	//Get or send data to/from interviewer. Supervisor always acts as the server
	function bluetoothServer()
		// Run the Bluetooth server to receive data from interviewer.	
		errmsg(tr(16), getbluetoothname());
		syncserver(Bluetooth, "..");
	end;



	//Send data (both listing and HHQ to supervisor from interviewer
	function numeric syncSendListing()
		if syncconnect(bluetooth) = 1 then
			syncdata(PUT, LISTING_DICT);
			syncData(PUT, HHQ_DICT);
			syncdisconnect();
			syncSendListing = 1;
		else
			errmsg(tr(8));
			syncSendListing = 0;
		endif;
	end;


	

	//Interviewer get Sample from supervisor
	function syncGetSample()
		//Delete the old sample file first
		if fileexist("../Data/Sample.csdb") then
			filedelete("../Data/Sample.csdb");
		endif;
		setFile(SAMPLING_DICT, "../Data/Sample.csdb", create);
	
		if syncconnect(bluetooth) = 1 then
			syncdata(GET, SAMPLING_DICT);
			syncdisconnect();
			syncGetSample = 1;
		else
			errmsg(tr(8));
			syncGetSample = 0;
		endif;
	end;



	function syncHQ()
		if theCountry = "NO" then 
			if syncconnect(Dropbox) then	//Synching to dropbox for debugging		
				syncdata(PUT, COMMUNITY_DICT);
				syncdata(PUT, HHQ_DICT);
				syncdata(PUT, LISTING_DICT);
				syncdata(PUT, SAMPLING_DICT);
				
			
				syncdisconnect();
			else
				errmsg(tr(1));
			endif;
		else
			if syncconnect(CSWeb, syncUrl) = 1 then
				syncdata(PUT, COMMUNITY_DICT);
				syncdata(PUT, HHQ_DICT);
				syncdata(PUT, LISTING_DICT);
				syncdata(PUT, SAMPLING_DICT);
				syncdata(PUT, REGIONS_DICT);
				syncdata(PUT, USERS_DICT);
			
				syncdisconnect();
			else
				errmsg(tr(1));
			endif;
		endif;
	end;
	
	{
	function downloadMap(string mapFileName)
		
		//First deleting the old files in order not to fill up the tablet
		numeric del = filedelete("../Maps/*.mbtiles");

		if theCountry = "NO" then
			errmsg("Ingen kart for Norge. Bruk google maps!");
		else
			if syncconnect(CSWeb, syncUrl) = 1 then
				numeric syncRes = syncFile(GET, "/energy/Maps/" + mapFileName, "../Maps/" + mapFileName);
				if syncRes = 0 then
					errmsg(tr(39));
				endif;
				syncDisconnect();
			else
				errmsg(tr(39));
			endif;
		endif;
	end;
	}	


	//Toggle between satelite and normal view on maps
	function toggleView(string theFileName)
		numeric reply = accept(tr(27), tr(28), tr(29), tr(30));
		if reply = 1 then
			HHmap.setBaseMap("../Maps/" + theFileName);
		elseif reply = 2 then
			HHmap.setBaseMap(Normal);
		else
			HHmap.setBaseMap(Satellite);
		endif;
		HHMap.show();
	end;
			
	
	//*******************************writes to the sample dictionary**********************
	//Parameters:
	//conntype: 1 = Connection to grid
	//			2 = Connection to solar power
	//			3 = no connection
	//theCount: Number of cases to write to sample dictionary
	//theTotal:	Total number of occurences with this connection in the listing dictiornary
	//sampleSize: Total number to sample form current EA
	
	function writeSample(conntype, theCount, theTotal, sampleSize)

		//Going to need number of interviewers. Assuming always 3 or 4
		numeric numHHPerInt;	//Number of HH per interviewer
		numeric intNum;			//Number of interviewers
		if tabletCount(2,1) = "" then	//Only one interviewer
			numHHPerInt = sampleSize;
			intNum = 1;
		elseif tabletCount(3,1) = "" then	//Two interviewers
			numHHPerInt = sampleSize / 2;	
			intNum = 2;
		elseif tabletCount(4,1) = "" then	//3
			numHHPerInt = sampleSize / 3;
			intNum = 3;
		else
			numHHPerInt = samplesize / 4;
			intNum = 4;
		endif;
		
		numeric test;
		if fileexist("../Data/Sample.csdb") then
			test = setFile(SAMPLING_DICT, "../Data/Sample.csdb");
		else
			test = setFile(SAMPLING_DICT, "../Data/Sample.csdb", create);
		endif;
		//errmsg("Setfile? %d (should be 1) ", test);
				
		
		//Then do the actual sample process
		numeric step, startPoint;		
		if theCount = 1 or theCount = theTotal then
			step = 1;
			startPoint = 1;
			else			
			step = theTotal/theCount;
			//errmsg("step: %d. theTotal: %d, theCount: %d, regnestykket: %d", step, theTotal, theCount, theTotal/theCount);
			if step = 0 then
				step = 1;
			endif;
			seed(systime());
			startPoint = random(1, int(step) + 1);
		endif;
		
		
		numeric currIntStep = int(step);	//The "actual" step need to be integer
		numeric currStep = step;	//Use non-integers to get the actual steps right (trust me)
		numeric currCount = 0;
		numeric idx = 0;
		//errmsg("start: %d, step: %d, number of cases to draw: %d amogst %d HH", startPoint, step, theCount, theTotal);
							
		forcase LISTING_DICT where LL1 = visualValue(M_REGION) and LL2 = visualValue(M_DISTRICT)
							and LL3 = visualValue(M_SUBDISTRICT) and LL4 = visualValue(M_LOCALITY)
							and LL5 = visualValue(M_VILLAGE) and LL6 = visualValue(M_EA)
							and LL9 in 1,2 and LL12 = connType do
			inc(idx);
			if idx < startPoint and (idx <> startPoint + currIntstep) then
				//not selected	
			else
				S_LISTING_LOGIN = LLOGIN;
				SA1 = LL1;
				SA2 = LL2;
				SA3 = LL3;
				SA4 = LL4;
				SA5 = LL5;
				SA6 = LL6;				
				SA7 = LL7;
				SA7A = LL7A;
				SA7B = LL7B;
				SA8 = LL8;
				SA9 = LL9;
				SA10 = LL10;
				SA11 = LL11;
				SA12 = LL12;
				SUR = LLUR;
				
				//Need to keep track of how many HH is assigned to each enumerator. Ie find the index of the current
				//tablet in the array
				numeric j = 1;
				while j < 5 do
					if tabletCount(j,1) = tstrip(LLOGIN) then
						break;
					endif;
					inc(j);
				enddo;
				
				numeric currHHNum = toNumber(tabletCount(j,2));
				if currHHNum = DEFAULT then
					currHHNum = 0;
				endif;
				//errmsg("Int: %s, Ant. assignet denne int så langt: %d, Skal bli: %d, sampleSize: %d", tabletCount(j,1), currHHNum, numHHPerInt, sampleSize); 		
			
		
				if currHHNum < numHHPerInt then
					//OK. This enumerator needs more HH to interview
					inc(currHHNum);
					tabletCount(j,2) = edit("9", currHHNum);
					SLOGIN = LLOGIN;
					writecase(SAMPLING_DICT);
				else
					//Need to assign the HH to another one. Try one by one until I find somewhere
					numeric found = 0;
					while found = 0 do
						inc(j);
						if j > intNum then
							j = j - intNum;
						endif;
						currHHNum = toNumber(tabletCount(j,2));
						if currHHNum = DEFAULT then
							currHHNum = 0;
						endif;
						if  currHHNum < numHHPerInt then
							inc(currHHNum);
							tabletCount(j,2) = edit("9", currHHNum);
							SLOGIN = tstrip(tabletCount(j,1));
							writecase(SAMPLING_DICT);
							found = 1;
						endif;
					enddo;
				endif;
				
				currstep = currstep + step;
				currIntStep = int(currStep);
				inc(currCount);
			endif;
			
			if currCount = theCount then
				break;	//finished
			endif;
		endfor;
		
	 end;

	

	//If the fewer than 20/24 units is listed, we need to sample them all
	function sampleAll()
		if fileexist("../Data/Sample.csdb") then
			setFile(SAMPLING_DICT, "../Data/Sample.csdb");
		else
			setFile(SAMPLING_DICT, "../Data/Sample.csdb", create);
		endif;
		
		forcase LISTING_DICT where LL1 = visualValue(M_REGION) and LL2 = visualValue(M_DISTRICT)
							and LL3 = visualValue(M_SUBDISTRICT) and LL4 = visualValue(M_LOCALITY)
							and LL5 = visualValue(M_VILLAGE) and LL6 = visualValue(M_EA) and LL9 in 1,2 do
			SLOGIN = LLOGIN;
			SA1 = LL1;
			SA2 = LL2;
			SA3 = LL3;
			SA4 = LL4;
			SA5 = LL5;
			SA6 = LL6;
			SA7 = LL7;
			SA7A = LL7A;
			SA7B = LL7B;
			SA8 = LL8;
			SA9 = LL9;
			SA10 = LL10;
			SA11 = LL11;
			SA12 = LL12;
			SUR = LLUR;
			S_LISTING_LOGIN = LLOGIN;
			numeric wc = writecase(SAMPLING_DICT);
		endfor;
		
	end;
	
	
	//Setting table names in the array for counting number of HHs assigned.
	//The function returns total number of HH to sample
	function numeric setEnumerators()
		numeric ctr = 1, numOfInterviewers = 1;
		
		forcase LISTING_DICT where LL1 = visualValue(M_REGION) and LL2 = visualValue(M_DISTRICT)
							and LL3 = visualValue(M_SUBDISTRICT) and LL4 = visualValue(M_LOCALITY)
							and LL5 = visualValue(M_VILLAGE) and LL6 = visualValue(M_EA) and LL9 in 1,2 do
			if ctr = 1 then
				tabletCount(1,1) = tstrip(LLOGIN);
			else
				numeric j = 2;
				while j < 5 do
					if tabletCount(j-1,1) = tStrip(LLOGIN) then
						break;
					else
						if tabletCount(j,1) = "" then
							tabletCount(j, 1) = tStrip(LLOGIN);
							inc(numOfInterviewers);
							//errmsg("j: %d, int: %d, device: %s", j, numOfInterviewers, tStrip(LLOGIN))
						endif;
					endif;
					inc(j);
				enddo;				
			endif;
			inc(ctr);			
		endfor;
		if visualValue(M_URBAN_RURAL) = 2 then
			setEnumerators = 24;	//Samplesize always the same for rural areas
		else
			if numOfInterviewers = 3 then
				setEnumerators = 21;	//Need a number divisible by 3
			else
				setEnumerators = 20
			endif;
		endif;
		
	end;



	//************************Preliminary calculations before writing to the sample file
	function calculateSample()
	
		//Reset the variables keeping track of number of households assigned to interviewers and get the sample size
		//which is dependent on the number of interviewers as well as urban/rural
		tabletCount.clear();
		numeric sampleSize = setEnumerators();
		//errmsg("%s, %s, %s, %s", tabletCount(1,1), tabletCount(2,1), tabletCount(3,1), tabletCount(4,1));
		//errmsg("About to sample %d", sampleSize);
		
		//get rid of sample data from previous EA:
		numeric ok = close(SAMPLING_DICT);
		ok = Filedelete("../Data/Sample.csdb");
		//errmsg("Deleted %d files", ok);
		
		//Analysis of the listed cases
		numeric tot = countCases(LISTING_DICT
							where LL1 = visualValue(M_REGION) and LL2 = visualValue(M_DISTRICT)
							and LL3 = visualValue(M_SUBDISTRICT) and LL4 = visualValue(M_LOCALITY)
							and LL5 = visualValue(M_VILLAGE) and LL6 = visualValue(M_EA) and LL9 in 1,2);
		
		if tot <= sampleSize then
			sampleall();
		endif;
		
		numeric totSolar = countCases(LISTING_DICT
							where LL1 = visualValue(M_REGION) and LL2 = visualValue(M_DISTRICT)
							and LL3 = visualValue(M_SUBDISTRICT) and LL4 = visualValue(M_LOCALITY)
							and LL5 = visualValue(M_VILLAGE) and LL6 = visualValue(M_EA) and LL9 in 1,2 and LL12 = 2);
		numeric totGrid = countCases(LISTING_DICT
							where LL1 = visualValue(M_REGION) and LL2 = visualValue(M_DISTRICT)
							and LL3 = visualValue(M_SUBDISTRICT) and LL4 = visualValue(M_LOCALITY)
							and LL5 = visualValue(M_VILLAGE) and LL6 = visualValue(M_EA) and LL9 in 1,2 and LL12 = 1);
		numeric totNone = countCases(LISTING_DICT
							where LL1 = visualValue(M_REGION) and LL2 = visualValue(M_DISTRICT)
							and LL3 = visualValue(M_SUBDISTRICT) and LL4 = visualValue(M_LOCALITY)
							and LL5 = visualValue(M_VILLAGE) and LL6 = visualValue(M_EA) and LL9 in  1,2 and LL12 = 3);
							
		//solarCount = number of HH with solar panels that the sample should contain
		numeric solarCount = round(2 * sampleSize * totSolar/tot);	//Solar should have double chance of being sampled
		
		//Need to check if I have enogh HHs with solar
		if solarCount > totSolar then
			solarCount = totSolar;
		endif;
		
		//Drawing at least one.. Just to be sure:
		if solarCount = 0 and totSolar > 0 then
			solarCount = 1;
		endif;
		
		numeric theRest = sampleSize - solarCount;
		numeric theDenom = tot - totSolar;
		
		numeric gridCount = theRest * totGrid/theDenom;
		numeric noneCount = theREst * totNone/theDenom;
		
			
		//Checking the decimal part of the two others to find which to decrease accordingly
		if gridcount * 100 - int(gridCount) * 100 < noneCount * 100 - int(noneCount) * 100 then
			gridCount = int(gridcount);
			noneCount = sampleSize - solarCount - gridCount;
		else
			noneCount = int(noneCount);
			gridCount = sampleSize - solarCount - noneCount;
		endif;
		
		//errmsg("Final: Solar: %d, grid: %d, none: %d", solarCount, gridCount, noneCount);
		
		if solarCount > 0 then
			//errmsg("SAmpling solar. count: %d, tot: %d, sampleSize: %d", solarCount, totSolar, sampleSize);
			writeSample(2, solarCount, totSolar, sampleSize);
		endif;
		if gridCount > 0 then
			//errmsg("Smpling grid. count: %d, tot: %d, sampleSize: %d", gridCount, totGrid, sampleSize);
			writeSample(1, gridCount, totGrid, sampleSize);
		endif;
		if noneCount > 0 then
			//errmsg("Sampling none. count: %d, tot: %d, sampleSize: %d", noneCount, totNone, sampleSize);
			writeSample(3, noneCount, totNone, sampleSize);
		endif;

		errmsg(tr(4));		
	end;


	//Starting up the app with the right questionnaire
	function launchQuest(string questDesc, string questName)
		string questfileName = "../" + questName + "/" + questName + ".pff";
		
		// Start HQQ, listing or community questionnaire
		if execpff(questfileName, stop) = notappl then
			errmsg(tr(2));
		endif;
	end;



	//Write the PFF file to start up questionnaire (or update the menu.pff)
	//Parameters:
	//	questDesc: Application description (To be in the field "Description" in the pff file
	//	questName: Same as name of the application (HHQ, Listing, Community or Menu)
	//	HH: Semicolon separated string containing Household Head and description of location (Only for HHQ. emtpy string otherwise)
	//	serialNo: Serial number of household (Only for HHQ, NOTAPPL otherwise)
	//	loggedIn: S (Logged in as Supervisor), I = Logged in as Interviewer, N = Not logged in	
	function writePff(string questDesc, string questName, string HH, numeric serialNo, String theRole)
		//Create pff file
		string pffContent;
		//errmsg("desc: %s, name: %s, HH: %s, serial: %d, theRole: %s",
		//	questDesc, questName, HH, serialNo, theRole);
		pffContent = "[Run Information]\n";
		pffContent = pffContent + "Version=CSPro 7.6\n";
		pffContent = pffContent + "AppType=Entry\n";
		pffContent = pffContent + "Description=" + questDesc + "\n\n";
		
		if questName = "Menu" then
			pffContent = pffContent + "ShowInApplicationListing=Always\n\n";
		else
			pffContent = pffContent + "ShowInApplicationListing=Never\n\n";
		endif;


		pffContent = pffContent + "[DataEntryInit]\n";
		pffContent = pffContent + "Interactive=Ask\n";
		if questName = "HHQ" then
			//Need to decide whether it is partially saved, finished or not started
			numeric spos = pos(maketext(tr(23)), HH);	//partly saved
			numeric cpos = pos(makeText(tr(24)), HH);	//finished
			numeric thePos;
			if spos <> 0 then
				thePos = spos;
			elseif cpos <> 0 then
				thepos = cpos;
			endif;
			
			if thePos <> 0 then	//partly saved or completed
				HH = HH[1:thepos-1];
				thepos = pos(";", HH);
				string head = HH[1:thepos-1];
				string location = HH[thepos+1];
				
				string theKey = "";
				forcase HHQ_DICT do
				
					if tstrip(AA14) = tstrip(head) and tstrip(ADDRESS_LOCATION) = tstrip(location)
							and AA1 = visualValue(M_REGION) and AA2 = visualValue(M_DISTRICT)
							and AA3 = visualValue(M_SUBDISTRICT) and AA4 = visualValue(M_LOCALITY) and AA5 = visualValue(M_VILLAGE)
							and AA6 = visualvalue(M_EA) and AA8 = serialNo
							and tstrip(AALOGIN) = tstrip(M_LOGIN) then
						
						theKey = key(HHQ_DICT);
						//errmsg("Searching for this (found: %d): %s=%s?, %s=%s?, %d=%d?,  %d=%d?, %d=%d?, %d=%d?, %d=%d?, %d=%d?, %d=%d?, %s=%s",
						//	found, tstrip(AA14), tstrip(head), tstrip(ADDRESS_LOCATION), tstrip(location),
						//	AA1, visualValue(M_REGION), AA2, visualValue(M_DISTRICT), AA3, visualValue(M_SUBDISTRICT),
						//	AA4, visualValue(M_LOCALITY), AA5, visualValue(M_VILLAGE), AA6, visualvalue(M_EA), AA8, serialNo,
						//	tstrip(AALOGIN), tstrip(M_LOGIN));
			
						break;
					endif;
				enddo;
			
				if theKey <> "" then
					if ispartial(HHQ_DICT) then
						pffContent = pffContent + "StartMode=Modify\n";
					else
						numeric acc = accept(tr(40), tr(41), tr(42));
						if acc = 1 then
							reenter M_HOUSEHOLD;
						else
							errmsg(tr(31));
							pffContent = pffContent + "StartMode=Verify\n";
						endif;
					endif;
					pffContent = pffContent + "Key=" + theKey + "\n";
				else
					errmsg(tr(7));
					//pffContent = pffContent + "StartMode=Add\n";
				endif;
			else	//Not partial or completed.
				pffContent = pffContent + "StartMode=Add\n";
			endif;

		elseif questName = "Community" then
			//Same for Community: Is it partially saved or not?
			string theKey = "";
			forcase COMMUNITY_DICT do
				if tstrip(C_LOGIN) = tstrip(M_LOGIN)
						and C_A1 = visualValue(M_REGION)
						and C_A2 = visualValue(M_DISTRICT)
						and C_A3 = visualValue(M_SUBDISTRICT)
						and C_A4 = visualValue(M_LOCALITY)
						and C_A5 = visualValue(M_VILLAGE)
						and C_A6 = visualvalue(M_EA) then
					theKey = key(COMMUNITY_DICT);
					break;
				endif;
			enddo;
			if theKey <> "" then
				pffContent = pffContent + "StartMode=Modify\n";
				pffContent = pffContent + "Key=" + theKey + "\n";
			else
				pffContent = pffContent + "StartMode=Add\n";
			endif;
		else	//Menu  or listingpff
			pffContent = pffContent + "StartMode=Add\n";
		endif;
		
		if questName = "Listing" then
			pffContent = pffContent + "AutoAdd=Yes\n";
		else
			pffContent = pffContent + "AutoAdd=No\n";			//AutoAdd only works for windows, according to the manual

		endif;

		//The following is rather experimental..
		if getOS() = 10 then	//windows
			pffContent = pffContent + "FullScreen=Yes\n";	
		else
			pffContent = pffContent + "FullScreen=NoMenus\n"
		endif;
		
		pffContent = pffContent + "[Files]\n";
		pffContent = pffContent + "Application=./" + questName + ".ent\n";
		pffContent = pffContent + "InputData=../Data/" + questName + ".csdb|CSPRODB\n";
		//pffContent = pffContent + "Paradata=../Data/" + questName + "_" + getDeviceId() +  ".cslog\n\n";

		if questName = "HHQ" then
			pffContent = pffContent + "[ExternalFiles]\n";
			pffContent = pffContent + "SAMPLING_DICT=../Data/Sample.csdb|CSPRODB\n";
			pffContent = pffContent + "COUNTRYVARIABLES_DICT=../LookupFiles/countryVariables.csdb|CSPRODB\n\n";
		endif;

		if questName = "Menu" then
			pffContent = pffContent + "[ExternalFiles]\n";
			pffContent = pffContent + "COMMUNITY_DICT=../Data/Community.csdb|CSPRODB\n";
			pffContent = pffContent + "HHQ_DICT=../Data/HHQ.csdb|CSPRODB\n";
			pffContent = pffContent + "LISTING_DICT=../Data/Listing.csdb|CSPRODB\n";
			pffContent = pffContent + "REGIONS_DICT=../LookupFiles/Regions.csdb|CSPRODB\n";
			pffContent = pffContent + "SAMPLING_DICT=../Data/Sample.csdb|CSPRODB\n";
			pffContent = pffContent + "USERS_DICT=../LookupFiles/Users.csdb|CSPRODB\n\n";
			pffContent = pffContent + "COUNTRYVARIABLES_DICT=../LookupFiles/countryVariables.csdb|CSPRODB\n\n";

		endif;

		pffContent = pffContent + "[Parameters]\n";
		pffContent = pffContent + "LOGIN=" + M_LOGIN + "\n";
		pffContent = pffContent + "REGION=" + edit("ZZ", visualvalue(M_REGION)) + "\n";
		pffContent = pffContent + "DISTRICT=" + edit("ZZ", visualvalue(M_DISTRICT)) + "\n";
		pffContent = pffContent + "SUBDISTRICT=" + edit("ZZZ", visualvalue(M_SUBDISTRICT)) + "\n";
		pffContent = pffContent + "LOCALITY=" + edit("ZZ", visualvalue(M_LOCALITY)) + "\n";
		pffContent = pffContent + "VILLAGE=" + edit("ZZ", visualValue(M_VILLAGE)) + "\n";
		pffContent = pffContent + "EA=" + edit("ZZZ", visualvalue(M_EA)) + "\n";
		pffContent = pffContent + "URBANRURAL=" + edit("Z", visualvalue(M_URBAN_RURAL)) + "\n";
		pffContent = pffContent + "SERIAL=" + edit("ZZZ", serialNo) + "\n";
		pffContent = pffContent + "Language=" + getLanguage() + "\n";
		pffContent = pffContent + "country=" + theCountry + "\n";

		if questName <> "Menu" then
			pffContent = pffContent + "OnExit=../Menu/Menu.pff\n";
		else
			pffContent = pffContent + "LOGGEDIN=" + theRole + "\n";
		endif;

		string questfileName = "../" + questName + "/" + questName + ".pff";
		file fileHandle;
		numeric ok = setFile(fileHandle, questfileName, create);
		ok = filewrite(fileHandle, pffContent);
		close(fileHandle);

		if not ok then
			errmsg(tr(2));
		endif;
		
		if questName <> "Menu" then
			launchQuest(questDesc, questName);
		endif;
	end;



	//Make sure that the pff file is not set to start at a HH when starting next time
	function onstop()
		writepff("Energy survey", "Menu", "", NOTAPPL, "N");
		stop(1);
	end;	
	
	
	
	//If there are more than 1 household with the same GPS coordinates, we need to make it possible to choose
	//between them
	function showHHs(gpsN, gpsW, hashmap string status)
		//loop through to see if there's more than one HH at this location
		numeric  ctr = 0;
		array string acceptOptions(14);
		array string respondent(14);
		array serialNos(14);
		
		forcase SAMPLING_DICT where SA7A = gpsN and SA7B = gpsW and SLOGIN = M_LOGIN do
			//errmsg("showHHs. Checking this: %d=%d?, %d=%d, %s=%s?", SA7A, gpsN, SA7B, gpsW, SLOGIN, M_LOGIN);
		
			inc(ctr);
			acceptOptions(ctr) = strip(SA10) + "; " + strip(SA11) + " " + status(SA10);
			respondent(ctr)  = strip(SA10) + ";" + strip(SA11);
			serialNos(ctr) = SA8;
		endfor;
		
		if ctr = 1 then
			//only one HH at this spot.. Open it now
			writePff("Energy survey", "Menu", "", serialNos(1), "I");
			//errmsg("about to start with resp: %s and number: %d", acceptoptions(1), serialNos(1));
			//writePff("Household Questionnaire", "HHQ", respondent(1), serialNos(1), "I");
			writePff("Household Questionnaire", "HHQ", acceptOptions(1), serialNos(1), "I");
		else
			acceptOptions(ctr + 1) = makeText(tr(26));
			numeric theOne = accept(maketext(tr(19)), acceptOptions);
			if theOne <> ctr + 1 then
				writePff("Energy survey", "Menu", "", serialNos(theOne), "I");
				//writePff("Household Questionnaire", "HHQ", respondent(theOne), serialNos(theOne), "I");
				writePff("Household Questionnaire", "HHQ", acceptOptions(theOne), serialNos(theOne), "I");
			endif;
		endif;
	end;
	

	//Functions for user bar
	
	function setCountry()
		numeric optionNo = accept(tr(33), tr(34), tr(35), tr(36), tr(37), tr(38));
		if optionNo = 1 then
			theCountry = "MZ";
			setlanguage("PT");
		elseif optionNo = 2 then
			theCountry = "TZ";
			setlanguage("SW");
		elseif optionNo = 3 then
			theCountry = "MZ";
			setLanguage("EN");
		elseif optionNo = 4 then
			theCountry = "TZ";
			setLanguage("EN");
		else
			theCountrY = "NO";
			setLanguage("EN");
		endif;
		saveSetting("Country", theCountry);
		
		//Also need to set the server
		if loadcase(COUNTRYVARIABLES_DICT, theCountry) then
			syncUrl = SERVER;
		else
			errmsg(tr(2));
			stop();
		endif;	
	end;
	
	
	
	function changeLogin()
		LOGIN = prompt(makeText(tr(9)));
		numeric load = loadcase(USERS_DICT, LOGIN);
		if load = 0 then //No such user
			while load = 0 do
				errmsg(tr(17));
				LOGIN = prompt(makeText(tr(9)));
				load = loadcase(USERS_DICT, LOGIN);
			enddo;
		endif;
		
		if tolower(ROLE) = "supervisor" then
			loggedIn = "S"
		else
			loggedIn = "I";
		endif;
		M_LOGIN = LOGIN;
	end;	


	function downloadMaps()
		//Delete the ld files first?
		numeric delfiles = accept(maketext(tr(45)), makeText(tr(21)), maketext(tr(22)));
		if delfiles = 1 then
			numeric del = filedelete("../Maps/*.mbtiles");
		endif;
		if theCountry = "NO" then
			errmsg("Ingen kart for Norge. Bruk google maps!");
		else			
			if visualValue(M_REGION) = NOTAPPL or visualValue(M_REGION) = DEFAULT or visualValue(M_DISTRICT) = NOTAPPL or visualValue(M_DISTRICT) = DEFAULT then
				errmsg(tr(46));
				exit;
			endif;
			
			numeric ctr = 0;
			
			if syncconnect(CSWeb, syncUrl) = 1 then
				//Need to onstruct all the filenames and collect files 
				forcase REGIONS_DICT where REGION_CODE = M_REGION and DISTRICT_CODE = M_DISTRICT do
							string mapFileName = theCountry + "_" + edit("99", REGION_CODE) + edit("99", DISTRICT_CODE)
								+ edit("999", SUBDISTRICT_CODE) + edit("99", LOCALITY_CODE) + edit("99", VILLAGE_CODE) + edit("999", EA_CODE)
								+ ".mbtiles";
					numeric syncRes = syncFile(GET, "/energy/Maps/" + mapFileName, "../Maps/" + mapFileName);
					if syncRes = 0 then
						errmsg(tr(39));
					else
						inc(ctr);
					endif;
				enddo;
				syncDisconnect();
			else
				errmsg(tr(47));
			endif;
			if ctr = 0 then
				errmsg(tr(39));				
			endif;
			
		endif;
	end;

	


PROC MENU_FF
preproc
	userbar(clear);
	userbar(add button, makeText(tr(32)), setCountry());
	userbar(add button, makeText(tr(43)), changeLogin());
	userbar(add button, makeText(tr(44)), downloadMaps());
	userbar(show);


postproc
	//Writing the pff file to start up correctly next time
	writepff("Energy survey", "Menu", "", NOTAPPL, "N");



PROC MENU_QUEST_FORM
onfocus
	//Getting the right country and server name
	theCountry = loadsetting("Country");
	if theCountry = "" then
		setCountry();
	endif;
	
	COUNTRY = theCountry;
	if loadcase(COUNTRYVARIABLES_DICT, COUNTRY) then
		syncUrl = SERVER;
	else
		errmsg(tr(2));
		stop();
	endif;
	
//Just for checking if all map files are available.NB: Only to be used from PC - not tablets. Comment away when not in use
{
	list string missingFiles;
	numeric ctr = 0;
	forcase REGIONS_DICT do
		string filnavn = "../Maps/TZ_" + edit("99", REGION_CODE) + edit("99", DISTRICT_CODE) + edit("999", SUBDISTRICT_CODE) 
					+ edit("99", LOCALITY_CODE) + edit("99", VILLAGE_CODE) + edit("999", EA_CODE) + ".mbtiles";
		if not fileexist(filnavn) then
			missingFiles.add(filnavn);
		endif;
		if ctr = 0 then
			errmsg("%s", filnavn);
		endif;
		inc(ctr);
	enddo;
	errmsg("Number of missing files: %d", missingFiles.length());
}
		
postproc
	writepff("Energy survey", "Menu", "", NOTAPPL, "N");	
	


PROC M_LOGIN
preproc
	//Defaulting the geography to be same as last time. Asking about it after listing questionnaire
	//has been chosen..
	if toNumber(sysparm("REGION")) <> DEFAULT and toNumber(sysparm("REGION")) <> NOTAPPL then
		M_REGION = toNumber(sysparm("REGION"));
		M_DISTRICT = toNumber(sysparm("DISTRICT"));
		M_SUBDISTRICT = toNumber(sysparm("SUBDISTRICT"));
		M_LOCALITY = toNumber(sysparm("LOCALITY"));
		M_VILLAGE = toNumber(sysparm("VILLAGE"));
		M_EA = toNumber(sysparm("EA"));
		M_URBAN_RURAL = toNumber(sysparm("URBANRURAL"));
		if sysparm("SERIAL") <> "NOT" then
			M_HOUSEHOLD = toNumber(sysparm("SERIAL"));
		endif;
	endif;
	
	
	//Checking if person is already logged in
	loggedIn = sysparm("LOGGEDIN");
	LOGIN = sysparm("LOGIN");
	//errmsg("logged in: %s, login: %s", loggedIn, LOGIN);
	if loggedIn = "S" or loggedIn = "I" then	
		numeric load = loadcase(USERS_DICT, LOGIN);
		if load <> 0 then	//Successfully logged in. Can proceed to menus. Otherwise: Just continue to the postproc of this field
			M_LOGIN = LOGIN;			
			if loggedIn = "S" then
				skip to M_SUPERMENU;
			else
				if visualValue(M_HOUSEHOLD) <> NOTAPPL  and visualValue(M_HOUSEHOLD) <> DEFAULT then
					//coming "back" from interviewing a HH, hence assuming we want to go to the next HH
					M_HOUSEHOLD = NOTAPPL;
					skip to M_HOUSEHOLD;
				else
					M_HOUSEHOLD = NOTAPPL;
					Skip to M_MENU;
				endif;
			endif;
		endif;
	endif;
	
	
	
postproc
	
	
	loggedIn = "N";	//Just in case it's missing or something	
	LOGIN = $;
	numeric load = loadcase(USERS_DICT, LOGIN);
	if load = 0 then	//unsuccessful. Trying with lower case string instead
		LOGIN = toLower($);
		load = loadcase(USERS_DICT, LOGIN);
		if load = 0 then	//no such user
			errmsg(tr(17));
			reenter;		
		endif;
	endif;
	
	if  tolower(tstrip(ROLE)) = "supervisor" then
		loggedIn = "S";					
		skip to M_SUPERMENU;
	else
		serialStart = COUNTERSTART;
		loggedIn = "I";					
	endif;
	
	
PROC M_MENU
preproc
	$ = NOTAPPL;
	TemporaryHackFixThis = 0;
	
	
postproc
	//NB: For all of the questionnaires, the actual start-up of the questionnaires happens
	//at M_EA field..
	
	if $ = 1 then	//Listing form
		if visualValue(M_REGION) = DEFAULT 
					or visualValue(M_REGION) = NOTAPPL 
					or visualValue(M_DISTRICT) = DEFAULT
					or visualValue(M_DISTRICT) = NOTAPPL 
					or visualValue(M_SUBDISTRICT) = DEFAULT
					or visualValue(M_SUBDISTRICT) = NOTAPPL 
					or visualValue(M_LOCALITY) = DEFAULT
					or visualValue(M_LOCALITY) = NOTAPPL 
					or visualValue(M_VILLAGE) = DEFAULT
					or visualValue(M_VILLAGE) = NOTAPPL 
					or visualValue(M_EA) = DEFAULT
					or visualValue(M_EA) = NOTAPPL then
			newEA = "1";
		else
			newEA = prompt(maketext(tr(5)),numeric);
		endif;
		
		if newEA = "2" and (visualValue(M_REGION) <> DEFAULT and visualValue(M_REGION) <> NOTAPPL) then	//Not new EA
			//Not a new EA
			string OKVar = verifyVariables();
			if OkVar = "1" then
				skip to M_EA;
			else
				TemporaryHackFixThis = 1;
			endif;
			
		endif;
		//New EA - or missing/wrong variables.
		//need to set the serialstart if it hasn't been done
		if serialStart = 0 then
			LOGIN = M_LOGIN;
			loadCase(USERS_DICT, LOGIN);
			serialStart = COUNTERSTART;
		endif;
			
		//Also set all region variables to NOTAPPL in case they try to download maps too early
		M_REGION = NOTAPPL;
		M_DISTRICT = NOTAPPL;
		M_SUBDISTRICT  = NOTAPPL;
		M_LOCALITY = NOTAPPL;
		M_VILLAGE = NOTAPPL;
		M_EA = NOTAPPL;
		skip to M_REGION;
		
	elseif $ = 2 then	////HHQ questionnaire.
		String okVar = verifyVariables();
		if visualValue(M_REGION) = NOTAPPL or visualValue(M_DISTRICT) = NOTAPPL 
				or visualvalue(M_SUBDISTRICT) = NOTAPPL 
				or visualValue(M_LOCALITY) = NOTAPPL 
				or visualValue(M_VILLAGE) = NOTAPPL or visualvalue(M_EA) = NOTAPPL 
				or okVar = "2" then
			errmsg(tr(18));
			if okVar = "2" then				
				TemporaryHackFixThis = 1;
			endif;
			skip to M_REGION;
		else
			skip to M_HOUSEHOLD;
		endif;
		
	elseif $ = 4 then 		//Sync listingdata.
		errmsg(tr(60));
		String okVar = verifyVariables();
		//errmsg("In menu: %s", okVar);
		if okVar = "1" then	//ok
			numeric ok = syncSendListing();
			if ok = 1 then
				errmsg(tr(11));
			else
				errmsg(tr(12));
			endif;
			$ = NOTAPPL;
			reenter;
		else			
			TemporaryHackFixThis = 1;
			skip to M_REGION;
		endif;
	elseif $ = 5 then 		//get Sample/Households to interview
		numeric answer = accept(makeText(tr(20)), makeText(tr(21)), makeText(tr(22)));
		if answer = 1 then	//sure. Go ahead.. :)			
			numeric ok = syncGetSample();
			if ok = 1 then
				numeric numCases = countCases(SAMPLING_DICT where SLOGIN = M_LOGIN
							and SA1 = visualValue(M_REGION) 
							and SA2 = visualValue(M_DISTRICT)
							and SA3 = visualValue(M_SUBDISTRICT)
							and SA4 = visualValue(M_LOCALITY)
							and SA5 = visualvalue(M_VILLAGE)
							and SA6 = visualValue(M_EA));
				
				errmsg(tr(13), numCases);
			else
				errmsg(tr(14));
			endif;
		endif;
		$ = NOTAPPL;
		reenter;

	else	//$ = 9. quit
		//First need to reset pff file so that we don't start at M_HOUSEHOLD field when starting up again
		writepff("Energy survey", "Menu", "", NOTAPPL, "N");
		stop(1);	
	endif;
		
	
	
PROC M_SUPERMENU
preproc	
	TemporaryHackFixThis = 0;
	if visualValue(M_REGION) = NOTAPPL then
		skip to M_REGION;
	else		
		newEA = prompt(maketext(tr(5)),numeric);	//Moved to new EA? (1 = y)
		if newEA = "1" then
			//resetting region variables in case the user wants to download maps
			M_REGION = NOTAPPL;
			M_DISTRICT = NOTAPPL;
			M_SUBDISTRICT  = NOTAPPL;
			M_LOCALITY = NOTAPPL;
			M_VILLAGE = NOTAPPL;
			M_EA = NOTAPPL;

			skip to M_REGION;
		endif;
	endif;
	$ = NOTAPPL;
	

postproc
		
	if $ = 1 then	//Sync with interviewer
		errmsg(tr(60));
		string OkVar = verifyVariables();
		if OkVar = "2" then //not OK
			TemporaryHackFixThis = 1;
			skip to M_REGION;
		else
			bluetoothServer();
			$ = NOTAPPL;
			reenter;
		endif;
	elseif $ = 2 then
		//Generate sample.
		//Probably shpould have warnings that all gadget must be synced first
		CalculateSample();
		$ = NOTAPPL;
		reenter;
	elseif $ = 3 then
		//Sync with HQ
		syncHQ();
		$ = NOTAPPL;
		reenter;
	elseif $ = 4 then  //community questionnaire
		string okVar = verifyVariables();
		if OkVar = "2" then
			TemporaryHackFixThis = 1;
			skip to M_REGION;
		else
			writepff("Energy survey", "Menu", "", NOTAPPL, "S");
			writePff("Community Questionnaire", "Community", "", NOTAPPL, "S");
		endif;
	else	//$ = 9. Quit
		writepff("Energy survey", "Menu", "", NOTAPPL, "N");
		stop(1);
	endif;
	
	
		
		
		
PROC M_REGION
preproc
	array vsetCodes(vsetMax);
	array string vsetLabels(vsetMax);
	numeric currentRegion = NOTAPPL, idx = 0;
	
	forcase REGIONS_DICT do
		if currentRegion <> NOTAPPL and currentRegion = REGION_CODE then
			next;
		else
			vsetCodes(idx) = REGION_CODE;
			vsetLabels(idx) = REGION_NAME;
			currentRegion = REGION_CODE;			
			inc(idx);
		endif;
	enddo;
	
	vsetCodes(idx) = NOTAPPL;
	setValueset(M_REGION, vsetCodes, vsetLabels);

	
		
PROC M_DISTRICT
preproc
	array vsetCodes(vsetMax);
	array string vsetLabels(vsetMax);
	numeric currentDistrict = NOTAPPL, idx = 0;
	
	forcase REGIONS_DICT where REGION_CODE = M_REGION do
		if currentDistrict <> NOTAPPL and currentDistrict = DISTRICT_CODE then
			next;
		else
			vsetCodes(idx) = DISTRICT_CODE;
			vsetLabels(idx) = DISTRICT_NAME;
			currentDistrict = DISTRICT_CODE;			
			inc(idx);
		endif;
	enddo;
	
	vsetCodes(idx) = NOTAPPL;
	setValueset(M_DISTRICT, vsetCodes, vsetLabels);
	
postproc
	//numeric dmaps = accept(makeText(tr(49)), makeText(tr(21)), makeText(tr(22)));
	//if dmaps = 1 then
	//	downloadMaps();
	//endif;
	
PROC M_SUBDISTRICT
preproc
	array vsetCodes(vsetMax);
	array string vsetLabels(vsetMax);
	numeric currentSub = NOTAPPL, idx = 0;
	
	forcase REGIONS_DICT where REGION_CODE = M_REGION and DISTRICT_CODE = M_DISTRICT do
		if currentSub <> NOTAPPL and currentsub = SUBDISTRICT_CODE then
			next;
		else
			vsetCodes(idx) = SUBDISTRICT_CODE;
			vsetLabels(idx) = SUBDISTRICT_NAME;
			currentSub = SUBDISTRICT_CODE;			
			inc(idx);
		endif;
	enddo;
	
	vsetCodes(idx) = NOTAPPL;
	setValueset(M_SUBDISTRICT, vsetCodes, vsetLabels);
	
		
PROC M_LOCALITY
preproc
	array vsetCodes(vsetMax);
	array string vsetLabels(vsetMax);
	numeric currentLoc = NOTAPPL, idx = 0;
	
	forcase REGIONS_DICT where REGION_CODE = M_REGION and DISTRICT_CODE = M_DISTRICT and SUBDISTRICT_CODE = M_SUBDISTRICT do
		
		if currentLoc <> NOTAPPL and currentLoc = LOCALITY_CODE then
			next;
		else
			vsetCodes(idx) = LOCALITY_CODE;
			vsetLabels(idx) = LOCALITY_NAME;
			currentLoc = LOCALITY_CODE;			
			inc(idx);
		endif;
	enddo;
	
	vsetCodes(idx) = NOTAPPL;
	setValueset(M_LOCALITY, vsetCodes, vsetLabels);
	
		
PROC M_VILLAGE
preproc
	array vsetCodes(vsetMax);
	array string vsetLabels(vsetMax);
	numeric currentVillage = NOTAPPL, idx = 0;
	
	forcase REGIONS_DICT where REGION_CODE = M_REGION
						and DISTRICT_CODE = M_DISTRICT
						and SUBDISTRICT_CODE = M_SUBDISTRICT
						and LOCALITY_CODE = M_LOCALITY do
		if currentVillage <> NOTAPPL and currentVillage = VILLAGE_CODE then
			next;
		else
			vsetCodes(idx) = VILLAGE_CODE;
			vsetLabels(idx) = VILLAGE_NAME;
			currentVillage = VILLAGE_CODE;			
			inc(idx);
		endif;
	enddo;
	
	vsetCodes(idx) = NOTAPPL;
	setValueset(M_VILLAGE, vsetCodes, vsetLabels);
	
		
PROC M_EA
preproc
	if newEA = "1" or visualvalue(M_EA) = NOTAPPL or visualvalue(M_EA) = DEFAULT then
		array vsetCodes(vsetMax);
		array string vsetLabels(vsetMax);
		numeric currentEA = NOTAPPL, idx = 0;
	
		forcase REGIONS_DICT where REGION_CODE = M_REGION
							and DISTRICT_CODE = M_DISTRICT
							and SUBDISTRICT_CODE = M_SUBDISTRICT
							and LOCALITY_CODE = M_LOCALITY
							and VILLAGE_CODE = M_VILLAGE do
			if currentEA <> NOTAPPL and currentEA = EA_CODE then
				next;
			else
				vsetCodes(idx) = EA_CODE;
				vsetLabels(idx) = EA_NAME;
				currentEA = EA_CODE;			
				inc(idx);
			endif;
		enddo;
	
		vsetCodes(idx) = NOTAPPL;
		setValueset(M_EA, vsetCodes, vsetLabels);
	else
		noinput;
	endif;


	
postproc
	//Need to get the urban/rural status for the chosen EA
	REGION_CODE = 	visualvalue(M_REGION);
	DISTRICT_CODE = visualvalue(M_DISTRICT);
	SUBDISTRICT_CODE = visualvalue(M_SUBDISTRICT);
	LOCALITY_CODE = visualValue(M_LOCALITY);
	VILLAGE_CODE = visualvalue(M_VILLAGE);
	EA_CODE = visualvalue(M_EA);
	numeric ok = loadcase(REGIONS_DICT, REGION_CODE, DISTRICT_CODE, SUBDISTRICT_CODE, LOCALITY_CODE, VILLAGE_CODE, EA_CODE);
	M_URBAN_RURAL = URBAN_RURAL;
	
	//Writing the pff file for the menu to avoid having to enter the area values again
	writePff("Energy survey", "Menu", "", NOTAPPL, "I");
	
	//The following is done in a menu now
	{string mapFileName = theCountry + "_" + edit("99", M_REGION) + edit("99", M_DISTRICT)
			+ edit("999", M_SUBDISTRICT) + edit("99", M_LOCALITY) + edit("99", M_VILLAGE) + edit("999", M_EA)
			+ ".mbtiles";
	if not fileexist(mapfileName) then
		downloadMap(mapFileName);
	endif;}
	
	if loggedIn = "S" then	//supervisor. Back to Supermenu
		reenter M_SUPERMENU;
	else
		if M_MENU = 1 then 	//Listing

			numeric currSerial = serialStart;
			if newEA = "2" then
				//Not  NEW EA. Need to find biggest HH number until now
				forcase LISTING_DICT where tstrip(LLOGIN) = tstrip(M_LOGIN) and
							LL1 = visualvalue(M_REGION) and LL2 = visualvalue(M_DISTRICT)
							and LL3 = visualvalue(M_SUBDISTRICT) and LL4 = visualValue(M_LOCALITY)
							and LL5 = visualvalue(M_VILLAGE) and LL6 = visualvalue(M_EA) do
					if LL8 > currSerial and LL8 <> NOTAPPL then
						currSerial = LL8;
					endif;
				endfor;
			else	//New EA
			
				//double checking that the currSerial is correct - in case the interviewer has been messing around in a messy pattern I didn't expect
				LL8 = currSerial;				
				numeric lc = loadcase(LISTING_DICT, M_LOGIN, M_REGION, M_DISTRICT, M_SUBDISTRICT, M_LOCALITY, M_VILLAGE, M_EA, LL8);
				if lc <> 0 then
					//Case exists, the ea is not quite new after all.. :) Find biggest HH number
					forcase LISTING_DICT where tstrip(LLOGIN) = tstrip(M_LOGIN) and
							LL1 = visualvalue(M_REGION) and LL2 = visualvalue(M_DISTRICT)
							and LL3 = visualvalue(M_SUBDISTRICT) and LL4 = visualValue(M_LOCALITY)
							and LL5 = visualvalue(M_VILLAGE) and LL6 = visualvalue(M_EA) do
						if LL8 > currSerial then
							currSerial = LL8;
						endif;
					endfor;
				endif;	
				
			endif;
				
			writepff("Listing questionnaire", "Listing", "", currSerial, "I");
		
		elseif M_MENU = 2 then	//HHQ
			//Select household first
			skip to M_HOUSEHOLD;

		elseif M_MENU = 4 or M_MENU = 5 then //The region variables have been reset
			reenter M_MENU;
		endif;
	
	endif;
	M_MENU = notappl;


	
	
		
PROC M_HOUSEHOLD
onfocus
	
	//create value set (Despite using map to navigate from here, I need the value set for debugging: Maps doesn't work for windows
	array vsetCodes(vsetMax);
	array String vsetLabels(vsetMax);
	string vsetStatus;
	
	hashmap string statusByPerson; //To mark HoH with partial/finished/not started
	hashmap string visitStatus;		//To make sure GPS location has flag green or yellow if two or more HH
									//have the same location and one of them is finished
	
	HHmap.clearMarkers();
	
	numeric i = 0;
	numeric opened = open(SAMPLING_DICT);
	set first(SAMPLING_DICT);

	while loadcase(SAMPLING_DICT) do
		if tstrip(SLOGIN) = tstrip(M_LOGIN) then

			numeric markerId = HHMap.addMarker(SA7A, SA7B);
			HHMap.setMarkerDescription(markerId, strip(SA10) + "<br/>" + strip(SA11));
			
			//First check if it is already done
			AA14 = SA10;
			ADDRESS_LOCATION = SA11;
			AA1 = SA1;
			AA2 = SA2;
			AA3 = SA3;
			AA4 = SA4;
			AA5 = SA5;
			AA6 = SA6;
			AA8 = SA8;
			AALOGIN = SLOGIN;
			
			numeric loaded = loadCase(HHQ_DICT, AA14, ADDRESS_LOCATION, AA1, AA2, AA3, AA4, AA5, AA6, AA8, AALOGIN);			
			
			if not loaded then
				//Haven't been her yet for this HH but need to check in case another HH has same coordinates
				//Red flag to be set if there are any not-started HHs
				if not visitStatus.contains(SA7A + SA7B) 
					or (visitStatus.contains(SA7A + SA7B) and visitStatus(SA7A +SA7B) <> "yellow") then 
						HHMap.setMarkerImage(markerId, "../Images/Location-red.png");
						visitStatus(SA7A + SA7B) = "red";
				endif;
				vsetStatus = tr(25)+" (☐)";
				
			else			//Already visited. Need to find out if it is finished or not
				
				if ispartial(HHQ_DICT) then		
					//Yellow marker should always be set if relevant. 
					HHmap.setMarkerImage(markerId, "../Images/Location-yellow.png");
					visitStatus(SA7A + SA7B) = "yellow";
					vsetStatus = tr(23)+" (☒)";					
					
				else	//Finished. Green marker only to be set if no other HH are in this location or all are done
					if not visitStatus.contains(SA7A + SA7B) 
						or (visitStatus.contains(SA7A + SA7B) and visitStatus(SA7A + SA7B) = "green") then 
						HHMap.setMarkerImage(markerId, "../Images/Location-green.png");
						visitStatus(SA7A + SA7B) = "green";
					endif;
					vsetStatus = tr(24)+" (☑)";					
				endif;
			endif;


			vsetCodes(i) = SA8;
			vsetLabels(i) = strip(SA10) + ";  " + strip(SA11) + " " + strip(vsetStatus);	//Separating with semicolon to make it easy to find the name part
			statusByPerson(SA10) = vsetStatus;			
			

			//writePff("Energy survey", "Menu", "", SA8, "I"); //Need this to know where to start up again when returning from a HH questionnaire
			//HHMap.SetMarkerOnClick(markerId, writePff("Household Questionnaire", "HHQ", strip(SA10) + ";  " + strip(SA11), SA8, "I"));
			HHMap.SetMarkerOnClick(markerId, showHHs(SA7A, SA7B, statusByPerson));
			inc(i);
		endif;
	enddo;
	
	
	if i = 0 then
		errmsg(tr(7));
		stop(1);
	endif;
	string mapFileName = theCountry + "_" + edit("99", M_REGION) + edit("99", M_DISTRICT)
			+ edit("999", M_SUBDISTRICT) + edit("99", M_LOCALITY) + edit("99", M_VILLAGE) + edit("999", M_EA)
			+ ".mbtiles";
	
	//Moved getting the maps to a button 	
	{if not fileExist("../Maps/" + mapFileName) then
		downloadMap(mapFileName);
	endif;}
	
	//HHmap.setBaseMap("../Maps/" + mapFileName);
	HHmap.setBaseMap(Satellite);
	HHmap.addTextButton("Toggle view", toggleView("../Maps/" + mapFileName));
	HHmap.show();
	vsetCodes(i) = NOTAPPL;
	setValueset(M_HOUSEHOLD, vsetCodes, vsetLabels);
	

  
postproc	
	if getOS() = 10 then
		writePff("Energy survey", "Menu", "", $, "I"); //Need this to know where to start up again when returning from a HH questionnaire
		writepff("Household Questionnaire", "HHQ", getLabel($, $), $, "I");
	endif;
	//launchQuest("Household Questionnaire", "HHQ");
	
	
	
PROC MENU_ID
preproc
	reenter M_MENU;
