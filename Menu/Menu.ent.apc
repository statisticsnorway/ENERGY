{Application 'MENU' logic file generated by CSPro}
PROC GLOBAL

	numeric vsetMax = 100;		//Maximum number of items in dropdown lists
	string newEA = "2";			//To keep track if we moved to a new EA. 2 = No
	array string tabletCount(4,2); //To keep track of number of households assigned to each interviewer/tablet
									// first dimension: Id of tablet, second: number of HH assigned to tablet
									
	map HHmap;		//for showing the HHs on a map
	
	

	//function to strip leading spaces (the original strip function only strips trailing spaces)
	function string lstrip(string theString)
		numeric aPos = pos(" ", theString);
		while aPos = 1 do
			//leading space
			theString = theString[2];
			aPos = pos(" ", theString);
		enddo;
		lstrip = theString;
	end;
	
	
	//Function that strips both leading and trailing spaces
	function string tstrip(string theString)
		tstrip = strip(lstrip(theString));
	end;



	//Get or send data to/from interviewer. Supervisor always acts as the server
	function bluetoothServer()
		// Run the Bluetooth server to receive data from interviewer.	
		errmsg(tr(16), getbluetoothname());
		syncserver(Bluetooth, "..");
	end;



	//Send listing data to supervisor from interviewer
	function numeric syncSendListing()
		if syncconnect(bluetooth) = 1 then
			syncdata(PUT, LISTING_DICT);
			syncdisconnect();
			syncSendListing = 1;
		else
			errmsg(tr(8));
			syncSendListing = 0;
		endif;
	end;


	

	//Interviewer get Sample from supervisor
	function syncGetSample()
		if syncconnect(bluetooth) = 1 then
			syncdata(GET, SAMPLING_DICT);
			syncdisconnect();
			syncGetSample = 1;
		else
			errmsg(tr(8));
			syncGetSample = 0;
		endif;
	end;



	function syncHQ()
		//if syncconnect(CSWeb, "http://197.249.5.210:8080/energia/api") = 1 then
		if syncconnect(Dropbox) then	//Synching to dropbox for debugging
			syncdata(PUT, COMMUNITY_DICT);
			syncdata(PUT, HHQ_DICT);
			syncdata(PUT, LISTING_DICT);
			syncdata(PUT, SAMPLING_DICT);
			
			//Syncing of pen and pff files are now done using the "update" functionality 
			//on the tablet - not here..
			syncdisconnect();
		else
			errmsg(tr(1));
		endif;
	end;



	//upload (put) the paradata files to the server
	//This function is currently not in use. Keeping it in case we decide to use it after all
	function syncParadata()
		if syncconnect(CSWeb, "http://197.249.5.210:8080/energia/api") = 1 then
		//if syncconnect(Dropbox) then	//Synching to dropbox for debugging

			string pfileName = "HHQ_" + getDeviceId() +  ".cslog";
			if fileexist("/ENERGY/Data/" + pFileName) then
				errmsg("writing HHQ");
				syncFile(PUT, "/ENERGY/Data/" + pFileName, "ENERGY/Paradata/" + pFileName);
			endif;
			
			pfileName = "Listing_" + getDeviceId() +  ".cslog";
			if fileexist("/ENERGY/Data/" + pFileName) then
				errmsg("Writing listing");
				syncFile(PUT, "/ENERGY/Data/" + pFileName, "ENERGY/Paradata/" + pFileName);
			endif;
		
			syncdisconnect();
		else
			errmsg(tr(1));
		endif;
	end;


	
	//*******************************writes to the sample dictionary**********************
	//Parameters:
	//conntype: 1 = Connection to grid
	//			2 = Connection to solar power
	//			3 = no connection
	//theCount: Number of cases to write to sample dictionary
	//theTotal:	Total number of occurences with this connection in the listing dictiornary
	//sampleSize: Total number to sample form current EA
	
	function writeSample(conntype, theCount, theTotal, sampleSize)

		//Going to need number of interviewers. Assuming always 3 or 4
		numeric numHHPerInt;	//Number of HH per interviewer
		numeric intNum;			//Number of interviewers
		if tabletCount(4,1) = "" then
			numHHPerInt = sampleSize / 3;
			intNum = 3;
		else
			numHHPerInt = samplesize / 4;
			intNum = 4;
		endif;
		

		if fileexist("../Data/Sample.csdb") then
			setFile(SAMPLING_DICT, "../Data/Sample.csdb");
		else
			setFile(SAMPLING_DICT, "../Data/Sample.csdb", create);
		endif;
				
		
		//Then do the actual sample process
		numeric step, startPoint;		
		if theCount = 1 or theCount = theTotal then
			step = 1;
			startPoint = 1;
		else			
			step = int(theTotal/theCount);
			if step = 0 then
				step = 1;
			endif;
			seed(systime());
			startPoint = random(1, step + 1);
		endif;
		
		
		numeric currStep = step;
		numeric currCount = 0;
		numeric idx = 0;
		//errmsg("start: %d, step: %d, count: %d", startPoint, step, theCount);
		forcase LISTING_DICT where LL1 = visualValue(M_STATE_NUMBER) and LL2 = visualValue(M_COUNTY_CODE) 
							and LL3 = visualValue(M_SUB_COUNTY_CODE) and LL3_1 = visualValue(M_VILLAGE_CODE)
							and LL4 = visualValue(M_ENUMERATION_AREA) and LL11 = 1 and LL12 = connType do
			inc(idx);
			if idx < startPoint and (idx <> startPoint + currstep) then
				//not selected	
			else
				SDEVICE_ID = LDEVICE_ID;
				SA1 = LL1;
				SA2 = LL2;
				SA3 = LL3;
				SA3_1 = LL3_1;
				SA4 = LL4;
				SA5 = LL5;
				SA6 = LL6;
				SA6A = LL6A;
				SA7 = LL7;
				SA8 = LL8;
				SA9 = LL9;
				SA11 = LL12;
				SA12 = LL12;
				
				//Need to keep track of how many HH is assigned to each enumerator. Ie find the index of the current
				//tablet in the array
				numeric j = 1;
				while j < 5 do
					if tabletCount(j,1) = tstrip(LDEVICE_ID) then
						break;
					endif;
					inc(j);
				enddo;
				
				numeric currHHNum = toNumber(tabletCount(j,2));
				if currHHNum = DEFAULT then
					currHHNum = 0;
				endif;
				//errmsg("tablet: %s, currHHNum: %d, HHnum: %d, sampleSize: %d", tabletCount(j,1), currHHNum, numHHPerInt, sampleSize); 		
			
		
				if currHHNum < numHHPerInt then
					//OK. This enumerator needs more HH to interview
					inc(currHHNum);
					tabletCount(j,2) = edit("9", currHHNum);
					S_INTERVIEWER_DEVICEID = LDEVICE_ID;
					writecase(SAMPLING_DICT);
				else
					//Need to assign the HH to another one. Try one by one until I find somewhere
					numeric found = 0;
					while found = 0 do
						inc(j);
						if j > intNum then
							j = j - intNum;
						endif;
						currHHNum = toNumber(tabletCount(j,2));
						if currHHNum = DEFAULT then
							currHHNum = 0;
						endif;
						if  currHHNum < numHHPerInt then
							inc(currHHNum);
							tabletCount(j,2) = edit("9", currHHNum);
							S_INTERVIEWER_DEVICEID = tstrip(tabletCount(j,1));
							writecase(SAMPLING_DICT);
							found = 1;
						endif;
					enddo;
				endif;
				
				currstep = currstep + step;
				inc(currCount);
			endif;
			
			if currCount = theCount then
				break;	//finished
			endif;
		endfor;
		
	 end;

	

	//If the fewer than 20/24 units is listed, we need to sample them all
	function sampleAll()
		
		if fileexist("../Data/Sample.csdb") then
			setFile(SAMPLING_DICT, "../Data/Sample.csdb");
		else
			setFile(SAMPLING_DICT, "../Data/Sample.csdb", create);
		endif;
		
		forcase LISTING_DICT where LL1 = visualValue(M_STATE_NUMBER) and LL2 = visualValue(M_COUNTY_CODE) 
							and LL3 = visualValue(M_SUB_COUNTY_CODE) and LL3_1 = visualValue(M_VILLAGE_CODE) 
							and LL4 = visualValue(M_ENUMERATION_AREA) and LL11 = 1 do
			SDEVICE_ID = LDEVICE_ID;
			SA1 = LL1;
			SA2 = LL2;
			SA3 = LL3;
			SA3_1 = LL3_1;
			SA4 = LL4;
			SA5 = LL5;
			SA6 = LL6;
			SA6A = LL6A;
			SA7 = LL7;
			SA8 = LL8;
			SA9 = LL9;
			SA11 = LL12;
			SA12 = LL12;
			numeric wc = writecase(SAMPLING_DICT);
		endfor;
		
	end;
	
	
	//Setting table names in the array for counting number of HHs assigned.
	//The function returns total number of HH to sample
	function numeric setTabletNames()
		numeric ctr = 1, numOfInterviewers = 1;
		
		forcase LISTING_DICT where LL1 = visualValue(M_STATE_NUMBER) and LL2 = visualValue(M_COUNTY_CODE) 
							and LL3 = visualValue(M_SUB_COUNTY_CODE) and LL3_1 = visualValue(M_VILLAGE_CODE) 
							and LL4 = visualValue(M_ENUMERATION_AREA) and LL11 = 1 do
			if ctr = 1 then
				tabletCount(1,1) = tstrip(LDEVICE_ID);
			else
				numeric j = 2;
				while j < 5 do
					if tabletCount(j-1,1) = tStrip(LDEVICE_ID) then
						break;
					else
						if tabletCount(j,1) = "" then
							tabletCount(j, 1) = tStrip(LDEVICE_ID);
							inc(numOfInterviewers);
							//errmsg("j: %d, int: %d, device: %s", j, numOfInterviewers, tStrip(LDEVICE_ID))
						endif;
					endif;
					inc(j);
				enddo;				
			endif;
			inc(ctr);			
		endfor;
		if visualValue(M_URBAN_RURAL) = 2 then
			setTabletNames = 24;	//Samplesize always the same for rural areas
		else
			if numOfInterviewers = 3 then
				setTabletNames = 21;	//Need a number divisible by 3
			else
				setTabletNames = 20
			endif;
		endif;
	end;



	//************************Preliminary calculations before writing to the sample file
	function calculateSample()
	
		//Reset the variables keeping track of number of households assigned to interviewers and get the sample size
		//which is dependent on the number of interviewers as well as urban/rural
		tabletCount.clear();
		numeric sampleSize = setTabletNames();
		//errmsg("%s, %s, %s, %s", tabletCount(1,1), tabletCount(2,1), tabletCount(3,1), tabletCount(4,1));
		
		//get rid of sample data from previous EA:
		numeric ok = close(SAMPLING_DICT);
		ok = Filedelete("../Data/sample*.csdb");
		
		//Analysis of the listed cases
		numeric tot = countCases(LISTING_DICT 
							where LL1 = visualValue(M_STATE_NUMBER) and LL2 = visualValue(M_COUNTY_CODE) 
							and LL3 = visualValue(M_SUB_COUNTY_CODE) and LL3_1 = visualValue(M_VILLAGE_CODE) 
							and LL4 = visualValue(M_ENUMERATION_AREA) and LL11 = 1);
		
		if tot <= sampleSize then
			sampleall(); 
		endif;
		
		numeric totSolar = countCases(LISTING_DICT 
							where LL1 = visualValue(M_STATE_NUMBER) and LL2 = visualValue(M_COUNTY_CODE) 
							and LL3 = visualValue(M_SUB_COUNTY_CODE) and LL3_1 = visualValue(M_VILLAGE_CODE) 
							and LL4 = visualValue(M_ENUMERATION_AREA) and LL11 = 1 and LL12 = 2);
		numeric totGrid = countCases(LISTING_DICT 
							where LL1 = visualValue(M_STATE_NUMBER) and LL2 = visualValue(M_COUNTY_CODE)
							and LL3 = visualValue(M_SUB_COUNTY_CODE) and LL3_1 = visualValue(M_VILLAGE_CODE)
							and LL4 = visualValue(M_ENUMERATION_AREA) and LL11 = 1 and LL12 = 1);
		numeric totNone = countCases(LISTING_DICT 
							where LL1 = visualValue(M_STATE_NUMBER) and LL2 = visualValue(M_COUNTY_CODE)
							and LL3 = visualValue(M_SUB_COUNTY_CODE) and LL3_1 = visualValue(M_VILLAGE_CODE)
							and LL4 = visualValue(M_ENUMERATION_AREA) and LL11 = 1 and LL12 = 3);
							
		numeric solarCount = sampleSize * totSolar/tot;	//Number of HH with solar that the sample should contain
		numeric gridCount = sampleSize * totGrid/tot;
		numeric noneCount = sampleSize * totNone/tot;
		
		
		//We need to have at least 1 with solar system. Ensuring this:
		if int(solarCount) <> solarCount then	//Not sure if this works..
			solarCount = int(solarCount) + 1;
		endif;
			
		//Checking the decimal part of the two others to find which to decrease accordingly
		if gridcount * 100 - int(gridCount) * 100 < noneCount * 100 - int(noneCount) * 100 then
			gridCount = int(gridcount);
			noneCount = sampleSize - solarCount - gridCount;
		else
			noneCount = int(noneCount);
			gridCount = sampleSize - solarCount - noneCount;
		endif;
		
		//errmsg("Final: Solar: %d, grid: %d, none: %d", solarCount, gridCount, noneCount);
		
		if solarCount > 0 then
			writeSample(2, solarCOunt, totSolar, sampleSize);
		endif;
		if gridCount > 0 then
			writeSample(1, gridCount, totGrid, sampleSize);
		endif;
		if noneCount > 0 then
			writeSample(3, noneCount, totNone, sampleSize);
		endif;

		errmsg(tr(4));		
	end;


	//Starting up the app with the right questionnaire
	function launchQuest(string questDesc, string questName)
		string questfileName = "../" + questName + "/" + questName + ".pff";
	
		// Start HQQ, listing or community questionnaire
		if execpff(questfileName, stop) = notappl then
			errmsg(tr(2));
		endif;
	end;



	//Write the PFF file to start up questionnaire (or update the menu.pff
	function writePff(string questDesc, string questName, string HH, numeric serialNo)
		//Create pff file
		string pffContent;
		pffContent = "[Run Information]\n";
		pffContent = pffContent + "Version=CSPro 7.3\n";
		pffContent = pffContent + "AppType=Entry\n";
		pffContent = pffContent + "Description=" + questDesc + "\n\n";

		pffContent = pffContent + "[DataEntryInit]\n";
		pffContent = pffContent + "Interactive=Ask\n";
		if questName = "HHQ" then
			//Need to decide whether it is partially saved or not
			numeric spos = pos(";", HH);
			string head = HH[1:spos-1];
			string location = HH[spos+1];
			
			numeric found = 0;
			
			forcase HHQ_DICT do
				if tstrip(AA15) = tstrip(head) and tstrip(ADDRESS_LOCATION) = tstrip(location)
						and AA1 = visualValue(M_STATE_NUMBER) and AA2 = visualValue(M_COUNTY_CODE)
						and AA3 = visualValue(M_SUB_COUNTY_CODE) and AA3_1 = visualValue(M_VILLAGE_CODE)
						and AA4 = visualvalue(M_ENUMERATION_AREA) and AA5 = serialNo 						
						and tstrip(HHQ_DICT.DEVICE_ID) = tstrip(getDeviceId()) then
					found = 1;
					break;
				endif;
			enddo;
			if found = 1 then
				string idString = concat(AA15, ADDRESS_LOCATION, edit("ZZZ", AA1), edit("ZZZ", AA2), edit("ZZZ", AA3), 
									edit("ZZZ", AA3_1), edit("ZZZ", AA4), edit("ZZZ", AA5), HHQ_DICT.DEVICE_ID);
				pffContent = pffContent + "StartMode=Modify;" + idString + "\n";
			else
				pffContent = pffContent + "StartMode=Add\n";
			endif;
		elseif questName = "Community" then
			//Same for Community: Is it partially saved or not?
			numeric found = 0;
			forcase COMMUNITY_DICT do
				if tstrip(C_DEVICE_ID) = tstrip(getDeviceId()) 
						and C_A1 = visualValue(M_STATE_NUMBER)
						and C_A2 = visualValue(M_COUNTY_CODE) 
						and C_A3 = visualValue(M_SUB_COUNTY_CODE) 
						and C_A3_1 = visualValue(M_VILLAGE_CODE) 
						and C_A4 = visualvalue(M_ENUMERATION_AREA) then
					found = 1;
					break;
				endif;
			enddo;
			if found = 1 then
				string idString = concat(C_DEVICE_ID, edit("ZZZ", C_A1), edit("ZZZ", C_A2), edit("ZZZ", C_A3), 
									edit("ZZZ", C_A3_1), edit("ZZZ", C_A4));
				pffContent = pffContent + "StartMode=Modify;" + idString + "\n";
			else
				pffContent = pffContent + "StartMode=Add\n";
			endif;
		else
			pffContent = pffContent + "StartMode=Add\n";
		endif;
		if questName = "Listing" then
			pffContent = pffContent + "AutoAdd=Yes\n";
		else
			pffContent = pffContent + "AutoAdd=No\n";			//AutoAdd only works for windows, according to the manual

		endif;
		pffContent = pffContent + "FullScreen=Yes\n";	//experimental..
		//pffContent = pffContent + "Lock=CaseListing\n";	//Also experimental
		
		if questName = "Menu" then
			pffContent = pffContent + "ShowInApplicationListing=Always\n\n";
		else
			pffContent = pffContent + "ShowInApplicationListing=Never\n\n";
		endif;

		pffContent = pffContent + "[Files]\n";
		pffContent = pffContent + "Application=./" + questName + ".ent\n";
		pffContent = pffContent + "InputData=../Data/" + questName + ".csdb|CSPRODB\n";
		pffContent = pffContent + "Paradata=../Data/" + questName + "_" + getDeviceId() +  ".cslog\n\n";
		
		if questName = "HHQ" then
			pffContent = pffContent + "[ExternalFiles]\n";
			pffContent = pffContent + "SAMPLING_DICT=..\Data\sample.csdb|CSPRODB\n\n";
		endif;
		
		if questName = "Menu" then
			pffContent = pffContent + "[ExternalFiles]\n";
			pffContent = pffContent + "COMMUNITY_DICT=..\Data\Community.csdb|CSPRODB\n";
			pffContent = pffContent + "HHQ_DICT=..\Data\HHQ.csdb|CSPRODB\n";
			pffContent = pffContent + "LISTING_DICT=..\Data\Listing.csdb|CSPRODB\n";
			pffContent = pffContent + "REGIONS_DICT=..\LookupFiles\Regions.csdb|CSPRODB\n";
			pffContent = pffContent + "SAMPLING_DICT=..\Data\sample.csdb|CSPRODB\n";
			pffContent = pffContent + "USERS_DICT=..\LookupFiles\users.csdb|CSPRODB\n\n";
		endif;
		
		pffContent = pffContent + "[Parameters]\n";
		pffContent = pffContent + "DEVICE=" + getDeviceId() + "\n";
		pffContent = pffContent + "STATE=" + edit("ZZZ", visualvalue(M_STATE_NUMBER)) + "\n";
		pffContent = pffContent + "COUNTY=" + edit("ZZZ", visualvalue(M_COUNTY_CODE)) + "\n";
		pffContent = pffContent + "SUBCOUNTY=" + edit("ZZZ", visualvalue(M_SUB_COUNTY_CODE)) + "\n";
		pffContent = pffContent + "VILLAGE=" + edit("ZZZ", visualValue(M_VILLAGE_CODE)) + "\n";
		pffContent = pffContent + "EA=" + edit("ZZZ", visualvalue(M_ENUMERATION_AREA)) + "\n";
		pffContent = pffContent + "URBANRURAL=" + edit("Z", visualvalue(M_URBAN_RURAL)) + "\n";
		pffContent = pffContent + "SERIAL=" + edit("ZZZ", serialNo) + "\n";
		pffContent = pffContent + "Language=" + getLanguage() + "\n";
		
		if questName <> "Menu" then
			pffContent = pffContent + "OnExit=..\Menu\Menu.pff\n";	
		endif;
			
		string questfileName = "../" + questName + "/" + questName + ".pff";
		file fileHandle;
		numeric ok = setFile(fileHandle, questfileName, create);
		ok = filewrite(fileHandle, pffContent);
		close(fileHandle);

		if not ok then
			errmsg(tr(2));
		endif;
		
		if questName <> "Menu" then
			launchQuest(questDesc, questName); 
		endif;
	end;
	

	

PROC MENU_FF


PROC MENU_QUEST_FORM
preproc
	//Defaulting the geography to be same as last time. Asking about it after listing questionnaire
	//has been chosen..
	if toNumber(sysparm("STATE")) <> DEFAULT and toNumber(sysparm("STATE")) <> NOTAPPL then
		M_STATE_NUMBER = toNumber(sysparm("STATE"));
		M_COUNTY_CODE = toNumber(sysparm("COUNTY"));
		M_SUB_COUNTY_CODE = toNumber(sysparm("SUBCOUNTY"));
		M_VILLAGE_CODE = toNumber(sysparm("VILLAGE"));
		M_ENUMERATION_AREA = toNumber(sysparm("EA"));
		M_URBAN_RURAL = toNumber(sysparm("URBANRURAL"));
	endif;
	
	
	
PROC M_MENU
preproc
	$ = NOTAPPL;
	//errmsg("%s", getDeviceId());

	
postproc
	//NB: For all of the questionnaires, the actual start-up of the questionnaires happens
	//at M_ENUMERATION_AREA field..
	
	if $ = 1 then	//Listing form
		newEA = prompt(maketext(tr(5)),numeric);
		if newEA = "2" and (visualValue(M_STATE_NUMBER) <> DEFAULT and visualValue(M_STATE_NUMBER) <> NOTAPPL) then	//Not new EA
			//Not a new EA 
			skip to M_ENUMERATION_AREA;
		else
			skip to M_STATE_NUMBER;
		endif;
		
	elseif $ = 2 then	////HHQ questionnaire. 
		skip to M_HOUSEHOLD
		
	//elseif  $ = 3 then 	 //Community questionnaire. Moved to supervisor menu
		//skip to M_STATE_NUMBER;
		
	elseif $ = 4 then 		//Sync listingdata. 
		numeric ok = syncSendListing();
		if ok = 1 then
			errmsg(tr(11));
		else
			errmsg(tr(12));
		endif;
		$ = NOTAPPL;
		reenter;

	elseif $ = 5 then 		//get Sample/Households to interview
		numeric ok = syncGetSample();
		if ok = 1 then
			errmsg(tr(13));
		else
			errmsg(tr(14));
		endif;
		$ = NOTAPPL;
		reenter;

	elseif $ = 6 then	//Log in as supervisor
		//just continue to next field
		
{	elseif $ = 8 then 		//Upload paradata
		string para = prompt(maketext(tr(6)), numeric);
		if para = "1" then
			syncParadata();
		endif;
		$ = NOTAPPL;
		reenter;
}
	else	//$ = 9. quit
		stop(1);	
	endif;
		
	
	
PROC M_SUPERMENU
preproc
	if visualValue($) = NOTAPPL then	//first time. Need to ask for pw
		while 1 do
			LOGIN = prompt(tr(9));
			string pw = prompt(tr(10), password);
	
			numeric load = loadcase(USERS_DICT, LOGIN);
			if  tolower(tstrip(ROLE)) <> "supervisor" then 
				errmsg(tr(15));
				reenter M_MENU;
			elseif tstrip(pw) = tstrip(PASSWORD) then
				break;	//OK. Break out of the loop and continue below
			else 
				errmsg(tr(11)); 
			endif;
		enddo;
	endif;
	$ = NOTAPPL;
	

postproc	
	if $ = 1 then	//Sync with interviewer
		bluetoothServer();
		reenter;
	elseif $ = 2 then
		//Generate sample.
		//Probably shpould have warnings that all gadget must be synced first
		CalculateSample();
		reenter;
	elseif $ = 3 then
		//Sync with HQ
		syncHQ();
		reenter;
	elseif $ = 4 then
		//default flow. Just continue to next field
	else	//$ = 9. Quit
		stop(1);
	endif;
	
	
		
		
		
PROC M_STATE_NUMBER
preproc
	array vsetCodes(vsetMax);
	array string vsetLabels(vsetMax);
	numeric currentState = NOTAPPL, idx = 0;
	
	forcase REGIONS_DICT do
		if currentState <> NOTAPPL and currentState = REGION_CODE then
			next;
		else
			vsetCodes(idx) = REGION_CODE;
			vsetLabels(idx) = REGION_NAME;
			currentState = REGION_CODE;			
			inc(idx);
		endif;
	enddo;
	
	vsetCodes(idx) = NOTAPPL;
	setValueset(M_STATE_NUMBER, vsetCodes, vsetLabels);

	
		
PROC M_COUNTY_CODE
preproc
	array vsetCodes(vsetMax);
	array string vsetLabels(vsetMax);
	numeric currentCounty = NOTAPPL, idx = 0;
	
	forcase REGIONS_DICT where REGION_CODE = M_STATE_NUMBER do
		if currentCounty <> NOTAPPL and currentCounty = DISTRICT_CODE then
			next;
		else
			vsetCodes(idx) = DISTRICT_CODE;
			vsetLabels(idx) = DISTRICT_NAME;
			currentCounty = DISTRICT_CODE;			
			inc(idx);
		endif;
	enddo;
	
	vsetCodes(idx) = NOTAPPL;
	setValueset(M_COUNTY_CODE, vsetCodes, vsetLabels);
	
		
PROC M_SUB_COUNTY_CODE
preproc
	array vsetCodes(vsetMax);
	array string vsetLabels(vsetMax);
	numeric currentSub = NOTAPPL, idx = 0;
	
	forcase REGIONS_DICT where REGION_CODE = M_STATE_NUMBER and DISTRICT_CODE = M_COUNTY_CODE do
		if currentSub <> NOTAPPL and currentsub = SUBDISTRICT_CODE then
			next;
		else
			vsetCodes(idx) = SUBDISTRICT_CODE;
			vsetLabels(idx) = SUBDISTRICT_NAME;
			currentSub = SUBDISTRICT_CODE;			
			inc(idx);
		endif;
	enddo;
	
	vsetCodes(idx) = NOTAPPL;
	setValueset(M_SUB_COUNTY_CODE, vsetCodes, vsetLabels);
	
		
PROC M_VILLAGE_CODE
preproc
	array vsetCodes(vsetMax);
	array string vsetLabels(vsetMax);
	numeric currentVillage = NOTAPPL, idx = 0;
	
	forcase REGIONS_DICT where REGION_CODE = M_STATE_NUMBER 
						and DISTRICT_CODE = M_COUNTY_CODE 
						and SUBDISTRICT_CODE = M_SUB_COUNTY_CODE do
		if currentVillage <> NOTAPPL and currentVillage = VILLAGE_CODE then
			next;
		else
			vsetCodes(idx) = VILLAGE_CODE;
			vsetLabels(idx) = VILLAGE_NAME;
			currentVillage = VILLAGE_CODE;			
			inc(idx);
		endif;
	enddo;
	
	vsetCodes(idx) = NOTAPPL;
	setValueset(M_VILLAGE_CODE, vsetCodes, vsetLabels);
	
		
PROC M_ENUMERATION_AREA
preproc
	if newEA = "1" or visualvalue(M_ENUMERATION_AREA) = NOTAPPL or visualvalue(M_ENUMERATION_AREA) = DEFAULT then
		array vsetCodes(vsetMax);
		array string vsetLabels(vsetMax);
		numeric currentEA = NOTAPPL, idx = 0;
	
		forcase REGIONS_DICT where REGION_CODE = M_STATE_NUMBER 
							and DISTRICT_CODE = M_COUNTY_CODE 
							and SUBDISTRICT_CODE = M_SUB_COUNTY_CODE 
							and VILLAGE_CODE = M_VILLAGE_CODE do
			if currentEA <> NOTAPPL and currentEA = EA_CODE then
				next;
			else
				vsetCodes(idx) = EA_CODE;
				vsetLabels(idx) = EA_NAME;
				currentEA = EA_CODE;			
				inc(idx);
			endif;
		enddo;
	
		vsetCodes(idx) = NOTAPPL;
		setValueset(M_ENUMERATION_AREA, vsetCodes, vsetLabels);
	else
		noinput;
	endif;


	
postproc
	//Need to get the urban/rural status for the chosen EA
	REGION_CODE = 	visualvalue(M_STATE_NUMBER); 
	DISTRICT_CODE = visualvalue(M_COUNTY_CODE);
	SUBDISTRICT_CODE = visualvalue(M_SUB_COUNTY_CODE);
	VILLAGE_CODE = visualvalue(M_VILLAGE_CODE);
	EA_CODE = visualvalue(M_ENUMERATION_AREA);
	numeric ok = loadcase(REGIONS_DICT, REGION_CODE, DISTRICT_CODE, SUBDISTRICT_CODE, VILLAGE_CODE, EA_CODE);
	M_URBAN_RURAL = URBAN_RURAL;
	
	//Writing the pff file for the menu to avoid having to enter the area values again
	writePff("Menu", "Menu", "", NOTAPPL);
	if M_MENU = 1 then 	//Listing
		writepff("Listing questionnaire", "Listing", "", NOTAPPL);
		//launchQuest("Listing questionnaire", "Listing");
		
	elseif M_MENU = 3 then	//HHQ
		//Select household first
		skip to M_HOUSEHOLD;

	elseif M_MENU = 4 then
		writePff("Community Questionnaire", "Community", "", NOTAPPL);
		//launchQuest("Community Questionnaire", "Community");
	
	endif;
	M_MENU = notappl;


	
	
		
PROC M_HOUSEHOLD
preproc
	
	//create value set (Despite using map to navigate from here, I need the value set for debugging: Maps doesn't work for windows
	array vsetCodes(95);
	array String vsetLabels(95);
	numeric i = 0;
	numeric opened = open(SAMPLING_DICT);
	set first(SAMPLING_DICT);
	while loadcase(SAMPLING_DICT) do	
		if getOS() = 10 or (getOS() = 20 and tstrip(S_INTERVIEWER_DEVICEID) = tstrip(getDeviceId())) then	
			//getOS() = 10 for windows machines, hence I'm debugging and need samples
			vsetCodes(i) = SA8;
			vsetLabels(i) = strip(SA9) + ";  " + strip(SA5);	//Separating with semicolon to make it easy to find the name part
			
			numeric markerId = HHMap.addMarker(SA6, SA7);
			HHMap.setMarkerDescription(markerId, strip(SA9) + "<br/>" + strip(SA5));
			HHMap.SetMarkerOnClick(markerId, writePff("Household Questionnaire", "HHQ", strip(SA9) + ";  " + strip(SA5), SA8));
			inc(i);
		endif;
	enddo;
	
	if i = 0 then
		errmsg(tr(7));
		stop(1);
	endif;
	HHmap.show();
	errmsg("Her. rett etter show");
	vsetCodes(i) = NOTAPPL;
	setValueset(M_HOUSEHOLD, vsetCodes, vsetLabels);

	

postproc
	//errmsg("%s", getLabel($, $));
	if getOS() = 10 then
		writepff("Household Questionnaire", "HHQ", getLabel($, $), $);
	endif;
	//launchQuest("Household Questionnaire", "HHQ");
	
	
	
PROC MENU_ID
preproc
	reenter M_MENU;
